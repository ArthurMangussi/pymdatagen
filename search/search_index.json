{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mdatagen: A Python Library for the Generation of Artificial Missing Data","text":""},{"location":"#overview","title":"Overview","text":"<p>This package has been developed to address a gap in machine learning research, specifically the artificial generation of missing data. Santos et al. (2019) provided a survey that presents various strategies for both univariate and multivariate scenarios, but the Python community still needs implementations of these strategies. Our Python library missing-data-generator (mdatagen) puts forward a comprehensive set of implementations of missing data mechanisms, covering Missing Completely at Random (MCAR), Missing at Random (MAR), and Missing Not at Random (MNAR), allowing users to simulate several real-world scenarios comprising absent observations. The library is designed for easy integration with existing Python-based data analysis workflows, including well-established modules such as scikit-learn, and popular libraries for missing data visualization, such as missingno, enhancing its accessibility and usability for researchers.</p> <p>This Python package is a collaboration between researchers at the Aeronautics Institute of Technologies (Brazil) and the University of Coimbra (Portugal).</p>"},{"location":"#installation","title":"Installation","text":"<p>To install the package, please use the <code>pip</code> installation as follows:</p> <pre><code>pip install mdatagen\n</code></pre>"},{"location":"#contribuitions","title":"Contribuitions","text":"<p>Contributions are welcome! Feel free to open issues, submit pull requests, or provide feedback.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use mdatagen in your research, please cite the original paper</p> <p>Bibtex entry: <pre><code>@ARTICLE{Santos2019,\n  author={Santos, Miriam Seoane and Pereira, Ricardo Cardoso and Costa, Adriana Fonseca and Soares, Jastin Pompeu and Santos, Jo\u00e3o and Abreu, Pedro Henriques},\n  journal={IEEE Access}, \n  title={Generating Synthetic Missing Data: A Review by Missing Mechanism}, \n  year={2019},\n  volume={7},\n  number={},\n  pages={11651-11667},\n  doi={10.1109/ACCESS.2019.2891360}}\n</code></pre></p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>The authors gratefully acknowledge the Brazilian funding agencies FAPESP (Funda\u00e7\u00e3o Amparo \u00e0 Pesquisa do Estado de S\u00e3o Paulo) under grants 2022/10553-6, 2023/13688-2, and 2021/06870-3. Moreover, this research was supported in part by the Coordena\u00e7\u00e3o de Aperfei\u00e7oamento de Pessoalde N\u00edvel Superior - Brasil (CAPES) - Finance\u00a0Code\u00a0001, and Portuguese Recovery and Resilience Plan (PRR) through project C645008882-00000055 Center for Responsable AI.</p>"},{"location":"complete_pipeline_example/","title":"Complete Pipeline Example","text":"<p>This Jupyter Notebook provide a complete example of classical experimental setup for Missing Data studies. The main four steps are (Santos et al. (2019)):</p> <ul> <li>Data Collection: We used the Breast Cancer Wiscosin from Scikit-learn, which is complete (i.e., without missing values)</li> <li>Missing Data Generation: We selected to generate artificial missing data under MNAR mechanism</li> <li>Imputation: We performed the imputation by Multiple Imputation by Chained Equations (MICE)</li> <li>Evaluation: We evaluated the imputation quality with Mean Squared Error (MSE)</li> </ul> In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfrom mdatagen.multivariate.mMNAR import mMNAR\nfrom mdatagen.metrics import EvaluateImputation\nfrom mdatagen.plots import PlotMissingData\n</pre> import pandas as pd from sklearn.datasets import load_breast_cancer from sklearn.experimental import enable_iterative_imputer from sklearn.impute import IterativeImputer  from mdatagen.multivariate.mMNAR import mMNAR from mdatagen.metrics import EvaluateImputation from mdatagen.plots import PlotMissingData In\u00a0[\u00a0]: Copied! <pre># Load the data\nwiscosin = load_breast_cancer()\nwiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)\n\nX = wiscosin_df.copy()   # Features\ny = wiscosin.target    # Label values\n</pre> # Load the data wiscosin = load_breast_cancer() wiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)  X = wiscosin_df.copy()   # Features y = wiscosin.target    # Label values In\u00a0[\u00a0]: Copied! <pre># Create a instance with missing rate equal to 20% in dataset under MNAR mechanism\ngenerator = mMNAR(X=X, y=y)\n\n# Generate the missing data under MNAR mechanism\ngenerate_MDdata = generator.random(missing_rate=20,\n                                   deterministic=True)\n</pre> # Create a instance with missing rate equal to 20% in dataset under MNAR mechanism generator = mMNAR(X=X, y=y)  # Generate the missing data under MNAR mechanism generate_MDdata = generator.random(missing_rate=20,                                    deterministic=True) In\u00a0[\u00a0]: Copied! <pre># Visualize the missingness \nmiss_plot = PlotMissingData(data_missing=generate_MDdata, \n                            data_original=wiscosin_df)\n\nmiss_plot.visualize_miss(\"normal\")\n</pre> # Visualize the missingness  miss_plot = PlotMissingData(data_missing=generate_MDdata,                              data_original=wiscosin_df)  miss_plot.visualize_miss(\"normal\") In\u00a0[\u00a0]: Copied! <pre># Initialize the MICE imputer\nimputer = IterativeImputer(max_iter=100)\n\n# Training the Imputer\nimputer.fit(generate_MDdata)\n\ncol = X.columns.to_list() # Columns names in result dataframe\ncol.append(\"target\")\n\ndf_imputate = pd.DataFrame(\n    imputer.transform(generate_MDdata), columns = pd.Index(col)\n)\n</pre> # Initialize the MICE imputer imputer = IterativeImputer(max_iter=100)  # Training the Imputer imputer.fit(generate_MDdata)  col = X.columns.to_list() # Columns names in result dataframe col.append(\"target\")  df_imputate = pd.DataFrame(     imputer.transform(generate_MDdata), columns = pd.Index(col) )  In\u00a0[\u00a0]: Copied! <pre>eval_metric = EvaluateImputation(data_imputed=df_imputate,\n                                    data_original=X,\n                                    metric=\"mean_squared_error\")\neval_metric.show()\n</pre> eval_metric = EvaluateImputation(data_imputed=df_imputate,                                     data_original=X,                                     metric=\"mean_squared_error\") eval_metric.show()"},{"location":"complete_pipeline_example/#import-the-libraries","title":"Import the libraries\u00b6","text":""},{"location":"complete_pipeline_example/#step-1-data-collection","title":"Step 1: Data Collection\u00b6","text":""},{"location":"complete_pipeline_example/#step-2-missing-data-generation","title":"Step 2: Missing Data Generation\u00b6","text":""},{"location":"complete_pipeline_example/#step-3-imputation","title":"Step 3: Imputation\u00b6","text":""},{"location":"complete_pipeline_example/#step-4-evalutation","title":"Step 4: Evalutation\u00b6","text":""},{"location":"evaluation_imputation_quality/","title":"Evaluation of Imputation Quality","text":"<p>A basic example of generate artificial missing data with mdatagen library with the Iris dataset from scikit-learn. The feature petal length will receive the missing values under Missing Completly at Random (MCAR) mechanism. The simulated missing rate is 25%. The method to choose missing values is random. Our example fills the missing values with zero and evaluted the imputation quality with Mean Squared Error (MSE).</p> In\u00a0[\u00a0]: Copied! <pre># Import the libraries\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\nfrom mdatagen.univariate.uMCAR import uMCAR\nfrom mdatagen.metrics import EvaluateImputation\n\n# Load the data\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\nX = iris_df.copy()   # Features\ny = iris.target    # Label values\n\n# Create a instance with missing rate equal to 25% in dataset under MCAR mechanism\ngenerator = uMCAR(X=X, y=y, missing_rate=25, x_miss='petal length (cm)')\n\n# Generate the missing data under MNAR mechanism\ngenerate_data = generator.random()\n\neval_metric = EvaluateImputation(data_imputed=generate_data.drop(\"target\",axis=1).fillna(0),\n                                    data_original=X,\n                                    metric=\"mean_squared_error\")\nprint(eval_metric.show())\n</pre> # Import the libraries import pandas as pd from sklearn.datasets import load_iris  from mdatagen.univariate.uMCAR import uMCAR from mdatagen.metrics import EvaluateImputation  # Load the data iris = load_iris() iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)  X = iris_df.copy()   # Features y = iris.target    # Label values  # Create a instance with missing rate equal to 25% in dataset under MCAR mechanism generator = uMCAR(X=X, y=y, missing_rate=25, x_miss='petal length (cm)')  # Generate the missing data under MNAR mechanism generate_data = generator.random()  eval_metric = EvaluateImputation(data_imputed=generate_data.drop(\"target\",axis=1).fillna(0),                                     data_original=X,                                     metric=\"mean_squared_error\") print(eval_metric.show())"},{"location":"examples_plots/","title":"Visualization Plots","text":"<p>This Jupyter notebook provide some examples of how to use the Visualization module from mdatagen. The first step is get Iris dataset from Scikit-Learn. Afterward, we will generate missing values as following:</p> In\u00a0[31]: Copied! <pre># Get iris dataset and insert MV in 2 columns\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nimport numpy as np\nfrom typing import Optional\nfrom mdatagen.plots import PlotMissingData\n\ndef create_iris_missing(mrate, col_1:str, col_2:Optional[str]=None):\n    iris = load_iris()\n    iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    #iris_df['target'] = iris.target\n\n    iris_miss = iris_df.copy()\n    num_missing = int(mrate * len(iris_miss))\n    missing_indices = np.random.choice(iris_miss.index, size=num_missing, replace=False)\n    iris_miss.loc[missing_indices, col_1] = np.nan\n\n    if col_2:\n        missing_indices = np.random.choice(iris_miss.index, size=num_missing, replace=False)\n        iris_miss.loc[missing_indices, col_2] = np.nan\n\n    return iris_df, iris_miss\n</pre> # Get iris dataset and insert MV in 2 columns import pandas as pd from sklearn.datasets import load_iris import numpy as np from typing import Optional from mdatagen.plots import PlotMissingData  def create_iris_missing(mrate, col_1:str, col_2:Optional[str]=None):     iris = load_iris()     iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)     #iris_df['target'] = iris.target      iris_miss = iris_df.copy()     num_missing = int(mrate * len(iris_miss))     missing_indices = np.random.choice(iris_miss.index, size=num_missing, replace=False)     iris_miss.loc[missing_indices, col_1] = np.nan      if col_2:         missing_indices = np.random.choice(iris_miss.index, size=num_missing, replace=False)         iris_miss.loc[missing_indices, col_2] = np.nan      return iris_df, iris_miss In\u00a0[32]: Copied! <pre>mr = 0.4\ncol_1 = \"petal length (cm)\"\ncol_2 = \"sepal width (cm)\"\ncols = (col_1, col_2)\niris_df, iris_miss = create_iris_missing(mr, col_1=\"petal length (cm)\")\n</pre> mr = 0.4 col_1 = \"petal length (cm)\" col_2 = \"sepal width (cm)\" cols = (col_1, col_2) iris_df, iris_miss = create_iris_missing(mr, col_1=\"petal length (cm)\") In\u00a0[4]: Copied! <pre>iris_df\n</pre> iris_df Out[4]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 ... ... ... ... ... 145 6.7 3.0 5.2 2.3 146 6.3 2.5 5.0 1.9 147 6.5 3.0 5.2 2.0 148 6.2 3.4 5.4 2.3 149 5.9 3.0 5.1 1.8 <p>150 rows \u00d7 4 columns</p> In\u00a0[5]: Copied! <pre>iris_miss\n</pre> iris_miss Out[5]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 5.1 3.5 1.4 0.2 1 4.9 3.0 NaN 0.2 2 4.7 3.2 1.3 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 NaN 0.2 ... ... ... ... ... 145 6.7 3.0 NaN 2.3 146 6.3 2.5 5.0 1.9 147 6.5 3.0 NaN 2.0 148 6.2 3.4 5.4 2.3 149 5.9 3.0 5.1 1.8 <p>150 rows \u00d7 4 columns</p> In\u00a0[\u00a0]: Copied! <pre>miss_plot = PlotMissingData(data_missing=iris_miss, data_original=iris_df)\n</pre> miss_plot = PlotMissingData(data_missing=iris_miss, data_original=iris_df) In\u00a0[7]: Copied! <pre>miss_plot.visualize_miss(\"normal\")\n</pre> miss_plot.visualize_miss(\"normal\") In\u00a0[8]: Copied! <pre>miss_plot.visualize_miss(\"bar\")\n</pre> miss_plot.visualize_miss(\"bar\") In\u00a0[9]: Copied! <pre>miss_plot.visualize_miss(\"dendrogram\")\n</pre> miss_plot.visualize_miss(\"dendrogram\") In\u00a0[10]: Copied! <pre>miss_plot.visualize_miss(\"heatmap\")\n</pre> miss_plot.visualize_miss(\"heatmap\") In\u00a0[11]: Copied! <pre>miss_plot.visualize_miss(visualization_type=\"histogram\", col_missing=col_1, num_bins=5)\n</pre> miss_plot.visualize_miss(visualization_type=\"histogram\", col_missing=col_1, num_bins=5) In\u00a0[12]: Copied! <pre>miss_plot.visualize_miss(visualization_type=\"boxplot\", col_missing=col_1)\n</pre> miss_plot.visualize_miss(visualization_type=\"boxplot\", col_missing=col_1) In\u00a0[13]: Copied! <pre>miss_plot.visualize_miss(visualization_type=\"scatterplot\", cols=(col_1, col_2))\n</pre> miss_plot.visualize_miss(visualization_type=\"scatterplot\", cols=(col_1, col_2)) <p>We can also change the axis of the plot (x or y for missing):</p> In\u00a0[14]: Copied! <pre>miss_plot.visualize_miss(visualization_type=\"scatterplot\", cols=(col_2, col_1))\n</pre> miss_plot.visualize_miss(visualization_type=\"scatterplot\", cols=(col_2, col_1)) In\u00a0[33]: Copied! <pre>_, iris_miss_2d = create_iris_missing(mr, col_1, col_2)\n</pre> _, iris_miss_2d = create_iris_missing(mr, col_1, col_2) In\u00a0[34]: Copied! <pre>iris_miss_2d\n</pre> iris_miss_2d Out[34]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 5.1 3.5 1.4 0.2 1 4.9 NaN 1.4 0.2 2 4.7 3.2 1.3 0.2 3 4.6 NaN 1.5 0.2 4 5.0 NaN 1.4 0.2 ... ... ... ... ... 145 6.7 NaN 5.2 2.3 146 6.3 2.5 NaN 1.9 147 6.5 3.0 5.2 2.0 148 6.2 3.4 NaN 2.3 149 5.9 NaN 5.1 1.8 <p>150 rows \u00d7 4 columns</p> In\u00a0[35]: Copied! <pre>miss_plot_2d = PlotMissingData(data_missing=iris_miss_2d, data_original=iris_df)\n</pre> miss_plot_2d = PlotMissingData(data_missing=iris_miss_2d, data_original=iris_df) In\u00a0[36]: Copied! <pre>miss_plot_2d.visualize_miss(\"normal\")\n</pre> miss_plot_2d.visualize_miss(\"normal\") In\u00a0[37]: Copied! <pre>miss_plot_2d.visualize_miss(\"bar\")\n</pre> miss_plot_2d.visualize_miss(\"bar\") In\u00a0[38]: Copied! <pre>miss_plot_2d.visualize_miss(\"dendrogram\")\n</pre> miss_plot_2d.visualize_miss(\"dendrogram\") In\u00a0[39]: Copied! <pre>miss_plot_2d.visualize_miss(\"heatmap\")\n</pre> miss_plot_2d.visualize_miss(\"heatmap\") In\u00a0[40]: Copied! <pre>miss_plot_2d.visualize_miss(visualization_type=\"histogram\", col_missing=col_1, num_bins=5)\n</pre> miss_plot_2d.visualize_miss(visualization_type=\"histogram\", col_missing=col_1, num_bins=5) In\u00a0[41]: Copied! <pre>miss_plot_2d.visualize_miss(visualization_type=\"histogram\", col_missing=col_2, num_bins=5)\n</pre> miss_plot_2d.visualize_miss(visualization_type=\"histogram\", col_missing=col_2, num_bins=5) In\u00a0[42]: Copied! <pre>miss_plot_2d.visualize_miss(visualization_type=\"boxplot\", col_missing=col_1)\n</pre> miss_plot_2d.visualize_miss(visualization_type=\"boxplot\", col_missing=col_1) In\u00a0[43]: Copied! <pre>miss_plot_2d.visualize_miss(visualization_type=\"boxplot\", col_missing=col_2)\n</pre> miss_plot_2d.visualize_miss(visualization_type=\"boxplot\", col_missing=col_2) In\u00a0[44]: Copied! <pre>miss_plot_2d.visualize_miss(visualization_type=\"scatterplot\", cols=(col_1, col_2))\n</pre> miss_plot_2d.visualize_miss(visualization_type=\"scatterplot\", cols=(col_1, col_2)) In\u00a0[201]: Copied! <pre>iris_miss\n</pre> iris_miss Out[201]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 5.1 3.5 NaN 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 NaN 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 ... ... ... ... ... 145 6.7 3.0 NaN 2.3 146 6.3 2.5 5.0 1.9 147 6.5 3.0 5.2 2.0 148 6.2 3.4 NaN 2.3 149 5.9 3.0 NaN 1.8 <p>150 rows \u00d7 4 columns</p>"},{"location":"examples_plots/#only-1-feature-with-missing-values","title":"Only 1 feature with missing values\u00b6","text":""},{"location":"examples_plots/#two-features-with-missing-values","title":"Two features with missing values\u00b6","text":""},{"location":"mar_univariate_example/","title":"MAR univariate example","text":"<p>A basic example of generate artificial missing data under Missing at Random (MAR) mechanism with mdatagen library with the Iris dataset from scikit-learn. The observed feature is \"petal length\" and the feature that will receive the missing values is \"petal width\". The simulated missing rate is 12%. The method to choose missing values is random.</p> In\u00a0[1]: Copied! <pre># Import the libraries\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom mdatagen.univariate.uMAR import uMAR\n\n# Load the data\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\nX = iris_df.copy()   # Features\ny = iris.target    # Label values\n\n# Create a instance with missing rate equal to 12% in dataset under MAR mechanism\ngenerator = uMAR(X=X, \n                 y=y, \n                 missing_rate=12, \n                 x_miss='petal width (cm)',\n                 x_obs='petal length (cm)')\n\n# Generate the missing data under MNAR mechanism\ngenerate_data = generator.random()\nprint(generate_data.isna().sum())\n</pre> # Import the libraries import pandas as pd from sklearn.datasets import load_iris from mdatagen.univariate.uMAR import uMAR  # Load the data iris = load_iris() iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)  X = iris_df.copy()   # Features y = iris.target    # Label values  # Create a instance with missing rate equal to 12% in dataset under MAR mechanism generator = uMAR(X=X,                   y=y,                   missing_rate=12,                   x_miss='petal width (cm)',                  x_obs='petal length (cm)')  # Generate the missing data under MNAR mechanism generate_data = generator.random() print(generate_data.isna().sum()) <pre>sepal length (cm)     0\nsepal width (cm)      0\npetal length (cm)    38\npetal width (cm)      0\ntarget                0\ndtype: int64\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"mcar_univariate_example/","title":"MCAR univariate example","text":"<p>A basic example of generate artificial missing data with mdatagen library with the Iris dataset from scikit-learn. The feature petal length will receive the missing values under Missing Completly at Random (MCAR) mechanism. The simulated missing rate is 25%. The method to choose missing values is random.</p> In\u00a0[1]: Copied! <pre># Import the libraries\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom mdatagen.univariate.uMCAR import uMCAR\n\n# Load the data\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\nX = iris_df.copy()   # Features\ny = iris.target    # Label values\n\n# Create a instance with missing rate equal to 25% in dataset under MCAR mechanism\ngenerator = uMCAR(X=X, y=y, missing_rate=25, x_miss='petal length (cm)')\n\n# Generate the missing data under MNAR mechanism\ngenerate_data = generator.random()\nprint(generate_data.isna().sum())\n</pre> # Import the libraries import pandas as pd from sklearn.datasets import load_iris from mdatagen.univariate.uMCAR import uMCAR  # Load the data iris = load_iris() iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)  X = iris_df.copy()   # Features y = iris.target    # Label values  # Create a instance with missing rate equal to 25% in dataset under MCAR mechanism generator = uMCAR(X=X, y=y, missing_rate=25, x_miss='petal length (cm)')  # Generate the missing data under MNAR mechanism generate_data = generator.random() print(generate_data.isna().sum()) <pre>sepal length (cm)     0\nsepal width (cm)      0\npetal length (cm)    38\npetal width (cm)      0\ntarget                0\ndtype: int64\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"mnar_multivariate_examples/","title":"MNAR Multivariate Examples","text":"In\u00a0[3]: Copied! <pre># Import the libraries\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\n\nfrom mdatagen.multivariate.mMNAR import mMNAR\n\n# Load the data\nwiscosin = load_breast_cancer()\nwiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)\n\nX = wiscosin_df.copy()   # Features\ny = wiscosin.target    # Label values\n</pre> # Import the libraries import pandas as pd from sklearn.datasets import load_breast_cancer  from mdatagen.multivariate.mMNAR import mMNAR  # Load the data wiscosin = load_breast_cancer() wiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)  X = wiscosin_df.copy()   # Features y = wiscosin.target    # Label values <ul> <li>Random</li> </ul> In\u00a0[22]: Copied! <pre># Create a instance for MNAR mechanism\ngenerator = mMNAR(X=X, \n                  y=y,\n                  n_xmiss = 8, # 8 feature that will receive the missingness randomly\n                  threshold = 1) # highest values\n\n# Generate the missing data under MNAR mechanism up to 20% missing rate\ngenerate_data = generator.random(missing_rate=20, \n                                 deterministic=True) # Missingness based on own values\n\nqtd_miss = sum(generate_data.isna().sum())\nprint(f\"Global Missing rate = {round(qtd_miss/(generate_data.shape[0]*generate_data.shape[1]),2)}\")\nprint(\"\\n\")\nprint(\"Columns that receive the missingness:\")\nfor col in generate_data.columns:\n    if generate_data[col].isna().sum() &gt; 0:\n        print(col)\n    else:\n        pass\n</pre> # Create a instance for MNAR mechanism generator = mMNAR(X=X,                    y=y,                   n_xmiss = 8, # 8 feature that will receive the missingness randomly                   threshold = 1) # highest values  # Generate the missing data under MNAR mechanism up to 20% missing rate generate_data = generator.random(missing_rate=20,                                   deterministic=True) # Missingness based on own values  qtd_miss = sum(generate_data.isna().sum()) print(f\"Global Missing rate = {round(qtd_miss/(generate_data.shape[0]*generate_data.shape[1]),2)}\") print(\"\\n\") print(\"Columns that receive the missingness:\") for col in generate_data.columns:     if generate_data[col].isna().sum() &gt; 0:         print(col)     else:         pass  <pre>Global Missing rate = 0.19\nColumns that receive the missingness\nmean area\nmean smoothness\nmean concavity\nmean symmetry\ntexture error\nperimeter error\nworst texture\nworst area\n</pre> <ul> <li>Correlated</li> </ul> In\u00a0[24]: Copied! <pre># Create a instance for MNAR mechanism\ngenerator = mMNAR(X=X, \n                  y=y,\n                  threshold = 1) # highest values\n\n# Generate the missing data under MNAR mechanism up to 20% missing rate\ngenerate_data = generator.correlated(missing_rate=20, \n                                 deterministic=True) # Missingness based on own values\n\nqtd_miss = sum(generate_data.isna().sum())\nprint(f\"Global Missing rate = {round(qtd_miss/(generate_data.shape[0]*generate_data.shape[1]),2)}\")\nprint(\"\\n\")\nprint(\"Columns that receive the missingness:\")\nfor col in generate_data.columns:\n    if generate_data[col].isna().sum() &gt; 0:\n        print(col)\n    else:\n        pass\n</pre> # Create a instance for MNAR mechanism generator = mMNAR(X=X,                    y=y,                   threshold = 1) # highest values  # Generate the missing data under MNAR mechanism up to 20% missing rate generate_data = generator.correlated(missing_rate=20,                                   deterministic=True) # Missingness based on own values  qtd_miss = sum(generate_data.isna().sum()) print(f\"Global Missing rate = {round(qtd_miss/(generate_data.shape[0]*generate_data.shape[1]),2)}\") print(\"\\n\") print(\"Columns that receive the missingness:\") for col in generate_data.columns:     if generate_data[col].isna().sum() &gt; 0:         print(col)     else:         pass  <pre>Global Missing rate = 0.19\n\n\nColumns that receive the missingness:\nmean perimeter\nmean concavity\nradius error\ntexture error\ncompactness error\nfractal dimension error\nworst radius\nworst texture\nworst perimeter\nworst area\nworst smoothness\nworst concavity\nworst concave points\nworst symmetry\nworst fractal dimension\n</pre> <ul> <li>Missigness Based on Own Values (MBOV) using a randomess to choose miss locations in each feature -&gt; MBOV_randomness</li> </ul> In\u00a0[37]: Copied! <pre># Create a instance for MNAR mechanism\ngenerator = mMNAR(X=X, \n                  y=y,\n                  ) \n\nlist_to_gen_miss = [\"mean radius\",\"texture error\", \"area error\"]\n\n# Generate the missing data under MNAR mechanism up to 20% missing rate\ngenerate_data = generator.MBOV_randomness(missing_rate=20, \n                                          columns=list_to_gen_miss,\n                                          randomness=0.3)\n\n                                        \nqtd_miss = sum(generate_data.isna().sum())\nprint(f\"Global Missing rate = {round(qtd_miss / (len(list_to_gen_miss) * generate_data.shape[0]),2)}\")\nprint(\"\\n\")\nprint(\"Columns that receive the missingness:\")\nfor col in generate_data.columns:\n    if generate_data[col].isna().sum() &gt; 0:\n        print(col)\n    else:\n        pass\n</pre> # Create a instance for MNAR mechanism generator = mMNAR(X=X,                    y=y,                   )   list_to_gen_miss = [\"mean radius\",\"texture error\", \"area error\"]  # Generate the missing data under MNAR mechanism up to 20% missing rate generate_data = generator.MBOV_randomness(missing_rate=20,                                            columns=list_to_gen_miss,                                           randomness=0.3)                                           qtd_miss = sum(generate_data.isna().sum()) print(f\"Global Missing rate = {round(qtd_miss / (len(list_to_gen_miss) * generate_data.shape[0]),2)}\") print(\"\\n\") print(\"Columns that receive the missingness:\") for col in generate_data.columns:     if generate_data[col].isna().sum() &gt; 0:         print(col)     else:         pass <pre>Global Missing rate = 0.19\n\n\nColumns that receive the missingness:\nmean radius\ntexture error\narea error\n</pre> <ul> <li>Missingness Based on Intra-Relation (MBIR)</li> </ul> In\u00a0[38]: Copied! <pre># Create a instance for MNAR mechanism\ngenerator = mMNAR(X=X, \n                  y=y,\n                  ) \n\nlist_to_gen_miss = [\"mean radius\",\"texture error\", \"area error\"]\n\n# Generate the missing data under MNAR mechanism up to 20% missing rate\ngenerate_data = generator.MBIR(missing_rate=20, \n                               columns=list_to_gen_miss,\n                               statistical_method=\"Mann-Whitney\")\n                   \nqtd_miss = sum(generate_data.isna().sum())\nprint(f\"Global Missing rate = {round(qtd_miss / (len(list_to_gen_miss) * generate_data.shape[0]),2)}\")\nprint(\"\\n\")\nprint(\"Columns that receive the missingness:\")\nfor col in generate_data.columns:\n    if generate_data[col].isna().sum() &gt; 0:\n        print(col)\n    else:\n        pass\n</pre> # Create a instance for MNAR mechanism generator = mMNAR(X=X,                    y=y,                   )   list_to_gen_miss = [\"mean radius\",\"texture error\", \"area error\"]  # Generate the missing data under MNAR mechanism up to 20% missing rate generate_data = generator.MBIR(missing_rate=20,                                 columns=list_to_gen_miss,                                statistical_method=\"Mann-Whitney\")                     qtd_miss = sum(generate_data.isna().sum()) print(f\"Global Missing rate = {round(qtd_miss / (len(list_to_gen_miss) * generate_data.shape[0]),2)}\") print(\"\\n\") print(\"Columns that receive the missingness:\") for col in generate_data.columns:     if generate_data[col].isna().sum() &gt; 0:         print(col)     else:         pass <pre>Global Missing rate = 0.2\n\n\nColumns that receive the missingness:\nmean radius\ntexture error\narea error\n</pre>"},{"location":"mnar_multivariate_examples/#mnar-mechanism","title":"MNAR mechanism\u00b6","text":"<p>This Jupyter Notebook provides various strategies to generate artificial missing data under MNAR mechanism in multivariate scenario. Our example is using the Breast Cancer Wiscosin dataset from Scikit-learn.</p> <p>The approaches covered in this Jupyter Notebook are:</p> <ul> <li>Random</li> <li>Correlated</li> <li>Missigness Based on Own Values (MBOV) using a randomess to choose miss locations in each feature</li> <li>Missingness Based on Intra-Relation (MBIR)</li> </ul>"},{"location":"mnar_univariate_example/","title":"MNAR univariate example","text":"<p>A basic example of generate artificial missing data with mdatagen library with the Iris dataset from scikit-learn. The most correlated feature with label will receive the missing values under Missing Not at Random (MNAR) mechanism. The simulated missing rate is 10% (default). The method to choose missing values is lowest.</p> In\u00a0[1]: Copied! <pre>import pandas as pd\nfrom sklearn.datasets import load_iris\n\nfrom mdatagen.univariate.uMNAR import uMNAR\n\n# Load the data\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\nX = iris_df.copy()   # Features\ny = iris.target    # Label values\n\n# Create a instance with missing rate equal to 10% in dataset under MNAR mechanism\ngenerator = uMNAR(X=X, y=y, threshold=0)\n\n# Generate the missing data under MNAR mechanism\ngenerate_data = generator.run()\nprint(generate_data.isna().sum())\n</pre> import pandas as pd from sklearn.datasets import load_iris  from mdatagen.univariate.uMNAR import uMNAR  # Load the data iris = load_iris() iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)  X = iris_df.copy()   # Features y = iris.target    # Label values  # Create a instance with missing rate equal to 10% in dataset under MNAR mechanism generator = uMNAR(X=X, y=y, threshold=0)  # Generate the missing data under MNAR mechanism generate_data = generator.run() print(generate_data.isna().sum()) <pre>sepal length (cm)     0\nsepal width (cm)      0\npetal length (cm)     0\npetal width (cm)     15\ntarget                0\ndtype: int64\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"multivariate/","title":"Documentation about Multivariate scenario","text":""},{"location":"multivariate/#documentation-about-multivariate-mechanisms","title":"Documentation about Multivariate mechanisms","text":"<p>missing-data-generator has a multivariate approach that refers to more than one feature in a dataset containing missing values. From this concept, the literature presents three mechanisms: Missing Completely at Random (MCAR), Missing Not at Random (MNAR), and Missing at Random (MAR). Each mechanism has different strategies for choosing the missing locations, which are implemented in this Python package. For all methods in multivariate, the missing data rate is calculated for the entire dataset. </p> <p>The strategies to generate artificial missing data are described as follows:</p>"},{"location":"multivariate/#missing-at-random-mar","title":"Missing at Random (MAR)","text":"<ul> <li> <p>random: This method generates artificial missing data in <code>n_xmiss</code> features, selected randomly. If <code>n_xmiss</code> is not specified, it defaults to two. However, an error may occur depending on the input dataset's length. Both the observed feature and <code>x_miss</code> are randomly chosen. The missing locations in <code>x_miss</code> are determined by the lower values in the observed feature for each corresponding <code>x_miss</code>.</p> </li> <li> <p>correlated: This method generates missing data in features from the dataset, excluding the class (target). The strategy involves creating pairs/triples of features based on their correlation. For each pair, the most correlated feature with the class becomes <code>x_miss</code>, while the remaining is the observed feature (<code>x_obs</code>) determining missing locations in <code>x_miss</code>. In the case of triples, the first and second features most correlated with the class are designated as <code>x_miss</code>, and the third is <code>x_obs</code>. The selection criterion involves choosing the lowest values from the observed feature. Given that only one feature in a pair experiences missing data, the missing rate is twice the input missing rate. For triples, it is 1.5 times the missing rate.</p> </li> <li> <p>median: This method generates artificial missing data in the dataset, excluding the class (target). The strategy entails creating pairs/triples of features based on their correlation. For each pair/triple, an observed feature (<code>x_obs</code>) is randomly selected. The median of x_obs establishes two groups\u2014those lower and those equal to or higher than the median. Subsequently, a group is randomly chosen, and the lowest values within it determine the missing locations in <code>x_miss</code>. It is essential to note that for triples, two features will be designated as <code>x_miss</code>. Like the correlated method, the missing rate is twice the input rate for pairs and 1.5 times for triples rate.</p> </li> </ul>"},{"location":"multivariate/#missing-not-at-random-mnar","title":"Missing Not at Random (MNAR)","text":"<ul> <li> <p>random: Method to randomly choose the n_xmiss features x_miss in the dataset to generate missing data. The missing locations in x_miss are determined by the lower values based on an unobserved or feature itself.</p> </li> <li> <p>correlated: The correlated method mirrors the approach used in the Correlated Method of the Missing at Random (MAR). However, in the case of Missing Not at Random (MNAR), this technique diverges by avoiding using observed features from the dataset. Instead, MNAR employs an unobserved random feature that is not present in the dataset or uses the feature values itself.</p> </li> <li> <p>median: The median method shares similarities with the Median Method in the Missing at Random (MAR). However, in the case of Missing Not at Random (MNAR), this technique diverges by avoiding using observed features from the dataset. Instead, MNAR employs an unobserved random feature that is not present in the dataset or uses the feature values itself.</p> </li> <li> <p>MBOUV: Method to generate missing data based on the Missingness Based on Own and Unobserved Values (MBOUV), and it is described as follows: MBUV is applied to all nominal features and half of the continuous ones, while MBOV (with lower values removal) is applied to the remaining half of the features. Both approaches are applied iteratively, and the split of continuous features is performed randomly.</p> </li> <li> <p>MBOV_randomness: Method to generate missing data based on Missingness Based on Own Values (MBOV) using randomness to choose missing locations in each input feature. Randomness is a float between 0 and 0.5, introducing stochasticity to generate the missing locations in x_miss. If randomness equals 0, only the lowest values will be selected.</p> </li> <li> <p>MBOV_median: Method to generate missing data based on Missingness Based on Own Values (MBOV) using the median to choose missing locations in each input feature. For this method, object types are not allowed. The missing locations are closer to the median of each feature. We utilize np.argsort of the difference between the current value and the median of the feature. The N lowest values are selected to be missing.</p> </li> <li> <p>MBIR: Method to generate missing data based on Missingness Based on Intra-Relation (MBIR). MBIR is a novel approach to generating missing data by the MNAR mechanism. This method is based on the MAR strategy and involves finding the lowest values from an observed feature x_obs. Then, x_miss receives the missing values, and an auxiliary indicator is created, which is 1 for missing and 0 otherwise. The user can select the statistical method to evaluate if evidence of a significant difference exists. Finally, the feature with the most statistically significant differences is selected to determine the missing locations, and after that, it is removed from the dataset. This feature is dropped because MNAR uses an unobserved feature from the dataset. It is essential to clarify that if the user inputs all columns in the dataset, the entire dataset will be dropped.</p> </li> </ul>"},{"location":"multivariate/#missing-completly-at-random-mcar","title":"Missing Completly at Random (MCAR)","text":"<ul> <li> <p>random: Method to generate missing data in all datasets randomly. </p> </li> <li> <p>binomial: Function to generate missing data in input columns by Bernoulli distribution for each attribute informed. It is important to clarify that, similar to univariate MCAR binomial, occasionally, this method may only partially generate the missing rate specified by the user.</p> </li> </ul>"},{"location":"novel_mnar_multivariate_example/","title":"Novel MNAR Multivariate mechanism","text":"<p>A novel example of generate artificial missing data with mdatagen library with the Breast Cancer Wiscosin dataset from scikit-learn. The features will receive the missing values under Missing Not at Random (MNAR) mechanism. The simulated missing rate is 20%. The method to choose missing values is Missingness Based on Own and Unobserved Values (MBOUV).</p> In\u00a0[1]: Copied! <pre># Import the libraries\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\n\nfrom mdatagen.multivariate.mMNAR import mMNAR\n\n# Load the data\nwiscosin = load_breast_cancer()\nwiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)\n\nX = wiscosin_df.copy()   # Features\ny = wiscosin.target    # Label values\n\n# Create a instance with missing rate equal to 20% in dataset under MNAR mechanism\ngenerator = mMNAR(X=X, y=y)\n\n# Generate the missing data under MNAR mechanism\ngenerate_data = generator.MBOUV(missing_rate=20, depend_on_external=X.columns)\nprint(generate_data.isna().sum())\n</pre> # Import the libraries import pandas as pd from sklearn.datasets import load_breast_cancer  from mdatagen.multivariate.mMNAR import mMNAR  # Load the data wiscosin = load_breast_cancer() wiscosin_df = pd.DataFrame(data=wiscosin.data, columns=wiscosin.feature_names)  X = wiscosin_df.copy()   # Features y = wiscosin.target    # Label values  # Create a instance with missing rate equal to 20% in dataset under MNAR mechanism generator = mMNAR(X=X, y=y)  # Generate the missing data under MNAR mechanism generate_data = generator.MBOUV(missing_rate=20, depend_on_external=X.columns) print(generate_data.isna().sum()) <pre>mean radius                166\nmean texture                61\nmean perimeter              35\nmean area                  148\nmean smoothness            156\nmean compactness           161\nmean concavity             112\nmean concave points        171\nmean symmetry               93\nmean fractal dimension     110\nradius error                74\ntexture error              160\nperimeter error             82\narea error                  63\nsmoothness error           160\ncompactness error          152\nconcavity error             99\nconcave points error       143\nsymmetry error             171\nfractal dimension error      1\nworst radius               170\nworst texture              159\nworst perimeter              4\nworst area                 170\nworst smoothness            51\nworst compactness          148\nworst concavity             42\nworst concave points       126\nworst symmetry              78\nworst fractal dimension    148\ntarget                       0\ndtype: int64\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"univariate/","title":"Documentation about Univariate scenario","text":""},{"location":"univariate/#documentation-about-univariate-mechanisms","title":"Documentation about Univariate mechanisms","text":"<p>missing-data-generator has a univariate approach that refers to only one feature in the dataset containing missing values. From this concept, the literature presents three mechanisms: Missing Completely at Random (MCAR), Missing Not at Random (MNAR), and Missing at Random (MAR). Each mechanism has different strategies for choosing the missing locations, which are implemented in this Python package.</p> <p>The strategies to generate artificial missing data are described as follows:</p>"},{"location":"univariate/#missng-at-random-mar","title":"Missng At Random (MAR)","text":"<ul> <li> <p>lowest: Method to generate missing values in the feature <code>x_miss</code> by selecting the lowest values from an observed feature based on a specified missing rate;</p> </li> <li> <p>rank: A rank is created for the observed feature; this rank serves as the criterion for identifying the missing locations in the feature <code>x_miss</code>. While the original paper proposed a rank determined by the sum of all ranks, in the mdatagen package, we employ the maximum rank plus 1 to determine whether the index will be missing. New random numbers are generated to facilitate continued searching if the target missing rate is not achieved after 50 iterations.</p> </li> <li> <p>median: This function generates missing data in the feature <code>x_miss</code> by utilizing the median of an observed feature <code>x_obs</code>. The median of <code>x_obs</code> results in two groups\u2014those equal to or higher than the median and those lower than the median. The group with values higher or equal to the median is chosen with a nine times greater probability based on a specified missing rate.</p> </li> <li> <p>highest: This function generates missing values in the feature <code>x_miss</code> by selecting the highest values from an observed feature.</p> </li> <li> <p>mix: This function generates missing values in the feature <code>x_miss</code> by incorporating the N/2 lowest values and N/2 highest values from an observed feature, where N is the missing data rate multiplied by the patterns from the dataset.</p> </li> </ul>"},{"location":"univariate/#missing-not-at-random-mnar","title":"Missing Not at Random (MNAR)","text":"<ul> <li>run: Method to generate missing values in the feature <code>x_miss</code> by selecting the threshold to choose values from an unobserved feature or feature itself. The threshold is a float between 0 and 1. If the threshold equals 0, the lowest values from an unobserved/observed feature will be selected to determine the missing locations in <code>x_miss</code>. Otherwise, if the threshold is 1, the highest values will be selected. This strategy is a generic implementation in the literature, and the user can employ various methodologies. The unobserved feature is not in the dataset; it consists of a range of random numbers with the same length as the patterns.</li> </ul>"},{"location":"univariate/#missing-completly-at-random-mcar","title":"Missing Completly at Random (MCAR)","text":"<ul> <li> <p>random: Method to randomly select missing locations in the feature <code>x_miss</code>.</p> </li> <li> <p>binomial: Method to determine feature <code>x_miss</code> locations to be missing using a Bernoulli distribution. In this method, we implement the Bernoulli distribution using <code>numpy.binomial</code>; occasionally, this method may not precisely generate the missing rate specified by the user.</p> </li> </ul>"},{"location":"api-docs/MAR_multivariate/","title":"MAR multivariate: mMAR Class","text":""},{"location":"api-docs/MAR_multivariate/#mdatagen.multivariate.mMAR","title":"mMAR","text":""},{"location":"api-docs/MAR_multivariate/#mdatagen.multivariate.mMAR.mMAR","title":"mMAR","text":"<pre><code>mMAR(X: pd.DataFrame, y: np.array, n_xmiss: int = 2, missTarget: bool = False)\n</code></pre> <p>A class to generate missing data in a dataset based on the Missing At Random (MAR) mechanism for multiple features simultaneously.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     n_xmiss (int): The number of features in the dataset that will receive missing values. Default is 2.     missTarget (bool, optional): A flag to generate missing into the target.</p> <p>Example Usage:</p> <pre><code># Create an instance of the MAR class\ngenerator = MAR(X, y, n_xmiss=4)\n\n# Generate missing values using the random strategy\ndata_md = generator.random(missing_rate = 20)\n</code></pre>"},{"location":"api-docs/MAR_multivariate/#mdatagen.multivariate.mMAR.mMAR.random","title":"random","text":"<pre><code>random(missing_rate: int = 10) -&gt; pd.DataFrame\n</code></pre> <p>Function to generate arficial missing data in n_xmiss features chosen randomly. The lower values in observed feature for each feature x_miss will determine the miss locations in x_miss.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_multivariate/#mdatagen.multivariate.mMAR.mMAR.correlated","title":"correlated","text":"<pre><code>correlated(missing_rate: int = 10) -&gt; pd.DataFrame\n</code></pre> <p>Function to generate missing data in features from dataset, except the class (target). The lower values in observed feature for each correlated pair will determine the miss locations in feature x_miss.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_multivariate/#mdatagen.multivariate.mMAR.mMAR.median","title":"median","text":"<pre><code>median(missing_rate: int = 10) -&gt; pd.DataFrame\n</code></pre> <p>Function to generate missing data in features from dataset. The median in observed feature for each correlated pair will create two groups. The group is chosen randomly, and lower values will determine the miss locations in feature x_miss.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_univariate/","title":"MAR univariate: uMAR Class","text":""},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR","title":"uMAR","text":""},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR","title":"uMAR","text":"<pre><code>uMAR(X: pd.DataFrame, y: np.array, missing_rate: int = 10, x_miss: str = None)\n</code></pre> <p>A class to generate missing values in a dataset based on the Missing At Random (MAR) univariate mechanism.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     x_miss (string): The name of feature to insert the missing data. If not informed, x_miss will be the feature most correlated with target</p> <p>Example Usage: <pre><code># Create an instance of the MAR class\ngenerator = MAR(X, y, missing_rate=20, x_miss='feature1')\n\n# Generate missing values using the lowest strategy\ndata_md = generator.lowest()\n</code></pre></p>"},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR.lowest","title":"lowest","text":"<pre><code>lowest()\n</code></pre> <p>Function to generate missing values in the feature (x_miss) using the lowest values from an observed feature.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR.rank","title":"rank","text":"<pre><code>rank()\n</code></pre> <p>Function to generate missing values in the feature (x_miss) using a rank from an observed feature.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR.median","title":"median","text":"<pre><code>median()\n</code></pre> <p>Function to generate missing data in the feature (x_miss) using the median of an observed feature.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR.highest","title":"highest","text":"<pre><code>highest()\n</code></pre> <p>Function to generate missing values in the feature (x_miss) using the highest values from an observed feature.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MAR_univariate/#mdatagen.univariate.uMAR.uMAR.mix","title":"mix","text":"<pre><code>mix()\n</code></pre> <p>Function to generate missing values in the feature (x_miss) using the N/2 lowest values and N/2 highest values from an observed feature.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MCAR_multivariate/","title":"MCAR multivariate: mMCAR Class","text":""},{"location":"api-docs/MCAR_multivariate/#mdatagen.multivariate.mMCAR","title":"mMCAR","text":""},{"location":"api-docs/MCAR_multivariate/#mdatagen.multivariate.mMCAR.mMCAR","title":"mMCAR","text":"<pre><code>mMCAR(X: pd.DataFrame, y: np.array, missing_rate: int = 10, missTarget: bool = False)\n</code></pre> <p>A class to generate missing data in a dataset based on the Missing Completely At Random (MCAR) mechanism for multiple features simultaneously.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     missTarget (bool, optional): A flag to generate missing into the target.</p> <p>Example Usage: <pre><code># Create an instance of the MCAR class\ngenerator = MCAR(X, y, missing_rate=20)\n\n# Generate missing values using the random strategy\ndata_md = generator.random()\n</code></pre></p>"},{"location":"api-docs/MCAR_multivariate/#mdatagen.multivariate.mMCAR.mMCAR.random","title":"random","text":"<pre><code>random() -&gt; pd.DataFrame\n</code></pre> <p>Function to randomly generate missing data in all dataset.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MCAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MCAR_multivariate/#mdatagen.multivariate.mMCAR.mMCAR.binomial","title":"binomial","text":"<pre><code>binomial(columns: list = None)\n</code></pre> <p>Function to generate missing data in columns by Bernoulli distribution for each attribute informed.</p> <p>Args:     columns (list): A list of strings containing columns names.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MCAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MCAR_univariate/","title":"MCAR univariate: uMCAR Class","text":""},{"location":"api-docs/MCAR_univariate/#mdatagen.univariate.uMCAR","title":"uMCAR","text":""},{"location":"api-docs/MCAR_univariate/#mdatagen.univariate.uMCAR.uMCAR","title":"uMCAR","text":"<pre><code>uMCAR(X: pd.DataFrame, y: np.array, missing_rate: int = 10, x_miss: str = None, method: str = 'random')\n</code></pre> <p>A class to generate missing values in a dataset based on the Missing Completely At Random (MCAR) univariate mechanism.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     x_miss (string, optional): The name of feature to insert the missing data.     method (str, optional): The method to choose x_miss. If x_miss not informed by user, x_miss will be choose randomly. The options to choose xmiss is [\"random\", \"correlated\", \"min\", \"max\"]. Default is \"random\"</p> <p>Example Usage: <pre><code># Create an instance of the MCAR class\ngenerator = MCAR(X, y, missing_rate=20, method=\"correlated\")\n\n# Generate missing values using the random strategy\ndata_md = generator.random()\n</code></pre></p>"},{"location":"api-docs/MCAR_univariate/#mdatagen.univariate.uMCAR.uMCAR.random","title":"random","text":"<pre><code>random()\n</code></pre> <p>Function to randomly select locations in the feature (x_miss) to be missing.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MCAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MCAR_univariate/#mdatagen.univariate.uMCAR.uMCAR.binomial","title":"binomial","text":"<pre><code>binomial()\n</code></pre> <p>Function to choose the feature (x_miss) locations to be missing by Bernoulli distribution.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MCAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_multivariate/","title":"MNAR multivariate: uMNAR Class","text":""},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR","title":"mMNAR","text":""},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR","title":"mMNAR","text":"<pre><code>mMNAR(X: pd.DataFrame, y: np.array, **kwargs)\n</code></pre> <p>A class to generate missing values in a dataset based on the Missing Not At Random (MNAR) mechanism for multiple features simultaneously.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Keyword Args:     n_xmiss (int, optional): The number of features in the dataset that will receive missing values. Default is the number of features in dataset.     threshold (float, optional): The threshold to select the locations in feature (xmiss) to receive missing values where 0 indicates de lowest and 1 highest values. Default is 0     missTarget (bool, optional): A flag to generate missing into the target.</p> <p>Example Usage: <pre><code># Create an instance of the MNAR class\ngenerator = MNAR(X, y)\n\n# Generate missing values using the random strategy\ndata_md = generator.random()\n</code></pre></p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.random","title":"random","text":"<pre><code>random(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to randomly choose the feature (x_miss) in dataset for generate missing data. The miss locations on x_miss is the lower values based on unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.correlated","title":"correlated","text":"<pre><code>correlated(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to generate missing data in dataset based on correlated pair. The feature (x_miss) most correlated with the class for each pair will receive the missing data based on lower values of an unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.median","title":"median","text":"<pre><code>median(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to generate missing data in all dataset based on median from each feature. The miss locations are chosen by lower values from a unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOUV","title":"MBOUV","text":"<pre><code>MBOUV(missing_rate: int = 10, depend_on_external=None, ascending=True)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own and Unobserved Values (MBOUV).</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOV_randomness","title":"MBOV_randomness","text":"<pre><code>MBOV_randomness(missing_rate: int = 10, randomness: float = 0, columns: list = None)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own Values (MBOV) using a randomess to choose miss locations in each feature.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     randomness (float, optional): The randomness rate for choose miss locations. Default is 0 that represents lower values     columns (list): A list of strings containing columns names.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOV_median","title":"MBOV_median","text":"<pre><code>MBOV_median(missing_rate: int = 10, columns: list = None)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own Values (MBOV) using a median to choose miss locations in each feature.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     columns (list): A list of strings containing columns names.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_multivariate/#mdatagen.multivariate.mMNAR.mMNAR.MBIR","title":"MBIR","text":"<pre><code>MBIR(missing_rate: int = 10, columns: list = None, statistical_method: str = 'Mann-Whitney')\n</code></pre> <p>Function to generate missing data based on Missingness Based on Intra-Relation (MBIR).</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     columns (list): A list of strings containing columns names.     statistical_method (str, optional): A string to inform statistical method.      The options are [\"Mann-Whitney\", \"Bayesian\"]. Default is Mann-Whitney</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_univariate/","title":"MNAR multivariate: mMNAR Class","text":""},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR","title":"mMNAR","text":""},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR","title":"mMNAR","text":"<pre><code>mMNAR(X: pd.DataFrame, y: np.array, **kwargs)\n</code></pre> <p>A class to generate missing values in a dataset based on the Missing Not At Random (MNAR) mechanism for multiple features simultaneously.</p> <p>Args:     X (pd.DataFrame): The dataset to receive the missing data.     y (np.array): The label values from dataset     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Keyword Args:     n_xmiss (int, optional): The number of features in the dataset that will receive missing values. Default is the number of features in dataset.     threshold (float, optional): The threshold to select the locations in feature (xmiss) to receive missing values where 0 indicates de lowest and 1 highest values. Default is 0     missTarget (bool, optional): A flag to generate missing into the target.</p> <p>Example Usage: <pre><code># Create an instance of the MNAR class\ngenerator = MNAR(X, y)\n\n# Generate missing values using the random strategy\ndata_md = generator.random()\n</code></pre></p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.random","title":"random","text":"<pre><code>random(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to randomly choose the feature (x_miss) in dataset for generate missing data. The miss locations on x_miss is the lower values based on unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.correlated","title":"correlated","text":"<pre><code>correlated(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to generate missing data in dataset based on correlated pair. The feature (x_miss) most correlated with the class for each pair will receive the missing data based on lower values of an unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.median","title":"median","text":"<pre><code>median(missing_rate: int = 10, deterministic: bool = False)\n</code></pre> <p>Function to generate missing data in all dataset based on median from each feature. The miss locations are chosen by lower values from a unobserved feature or feature x_miss itself.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     deterministc (bool, optinal): A flag that determine if x_miss will have miss      locations based on itself or an unobserved feature. Default is False     (i.e., an unobserved feature).</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [1] Santos, M. S., R. C. Pereira, A. F. Costa, J. P. Soares, J. Santos, and P. H. Abreu. 2019. Generating Synthetic Missing Data: A Review by Missing Mechanism. IEEE Access 7: 11651\u201367.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOUV","title":"MBOUV","text":"<pre><code>MBOUV(missing_rate: int = 10, depend_on_external=None, ascending=True)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own and Unobserved Values (MBOUV).</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOV_randomness","title":"MBOV_randomness","text":"<pre><code>MBOV_randomness(missing_rate: int = 10, randomness: float = 0, columns: list = None)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own Values (MBOV) using a randomess to choose miss locations in each feature.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     randomness (float, optional): The randomness rate for choose miss locations. Default is 0 that represents lower values     columns (list): A list of strings containing columns names.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.MBOV_median","title":"MBOV_median","text":"<pre><code>MBOV_median(missing_rate: int = 10, columns: list = None)\n</code></pre> <p>Function to generate missing data based on Missigness Based on Own Values (MBOV) using a median to choose miss locations in each feature.</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     columns (list): A list of strings containing columns names.</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/MNAR_univariate/#mdatagen.multivariate.mMNAR.mMNAR.MBIR","title":"MBIR","text":"<pre><code>MBIR(missing_rate: int = 10, columns: list = None, statistical_method: str = 'Mann-Whitney')\n</code></pre> <p>Function to generate missing data based on Missingness Based on Intra-Relation (MBIR).</p> <p>Args:     missing_rate (int, optional): The rate of missing data to be generated. Default is 10.     columns (list): A list of strings containing columns names.     statistical_method (str, optional): A string to inform statistical method.      The options are [\"Mann-Whitney\", \"Bayesian\"]. Default is Mann-Whitney</p> <p>Returns:     dataset (DataFrame): The dataset with missing values generated under     the MNAR mechanism.</p> <p>Reference: [2] Pereira, R. C., Abreu, P. H., Rodrigues, P. P., Figueiredo, M. A. T., (2024).  Imputation of data Missing Not at Random: Artificial generation and benchmark analysis.  Expert Systems with Applications, 249(B), 123654.</p>"},{"location":"api-docs/metrics/","title":"EvaluationImputation Class","text":""},{"location":"api-docs/plots/","title":"PlotMissingData Class","text":""}]}